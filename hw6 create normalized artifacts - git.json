{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "",
            "description": "",
            "hash": "819a2071301c5050570666e0a57e88bd791405bc",
            "joint": {
                "cells": [
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "4cc62d63-7846-4711-9beb-7f4a20181c65",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "53021276-40b4-4f41-9217-d4505880bdf6",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0a9a415a-eba8-4b5e-a212-ae4b3ccd336a",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 3
                    },
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'Filter_SRC_or_DST_Addresses' block\n    Filter_SRC_or_DST_Addresses(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "53021276-40b4-4f41-9217-d4505880bdf6",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 15,
                        "line_start": 7,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 320,
                            "y": 260
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 18
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "515f6958-afff-4127-8603-10b3e648ce89",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0a9a415a-eba8-4b5e-a212-ae4b3ccd336a",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "5aa6ff95-036b-44ea-84e9-ff56fc2c0cf2",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 73
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "080feb0c-5009-447e-b092-17c067a72527",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0a9a415a-eba8-4b5e-a212-ae4b3ccd336a",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "530a6aaa-bfa8-4305-9424-7c2ade17b251",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 90
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "delay execution 1, delay execution 2, delay execution 3, delay execution 4",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "a1635e0a-4627-418e-b2f3-42cd86114792",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 487,
                        "line_start": 474,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 19,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1740,
                            "y": 260
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 159
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "bdd603cc-ab61-4e8b-8991-608beb098d9a",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5aa6ff95-036b-44ea-84e9-ff56fc2c0cf2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "31fc58e4-22db-4523-9c05-d6770804b69e",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 292
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "13513fd5-8dda-4a72-9c7e-879ca9c89ff4",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "530a6aaa-bfa8-4305-9424-7c2ade17b251",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "11368d81-4195-4adb-aca4-09d1a65ffd11",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 294
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "2aebe1c8-1688-408d-92f5-6e2ae0578b05",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "31fc58e4-22db-4523-9c05-d6770804b69e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "41d66f19-3374-4267-8240-3fe8a9f7eefe",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 300
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "7c2d4241-271f-4139-805a-74b2dda9418a",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "31fc58e4-22db-4523-9c05-d6770804b69e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "9e8d36fe-2b63-478f-b42a-b7f73cc0028f",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 303
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "08c78e4c-8372-4300-b169-fb86da26b997",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "11368d81-4195-4adb-aca4-09d1a65ffd11",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "6109f49c-1144-4cef-86d9-ce84bc9dc3c4",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 309
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "cb4561ee-28fa-4fa8-ade1-eafce63ad515",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "11368d81-4195-4adb-aca4-09d1a65ffd11",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "67a8b887-fa39-4743-98d6-a1b536ae8539",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 313
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f7d6b9b4-c50e-4af1-9b22-6bd97d6583e2",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "41d66f19-3374-4267-8240-3fe8a9f7eefe",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0cccebc4-4ec8-4364-861a-d7f647184913",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 326
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "1bc3b3ce-7283-477b-98fe-dd03dcf5308b",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "9e8d36fe-2b63-478f-b42a-b7f73cc0028f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "917f8189-b5bc-496f-894c-38b8acd67c9f",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 336
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "1791ad9f-cbf3-4ad4-9409-791a09c8d238",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "6109f49c-1144-4cef-86d9-ce84bc9dc3c4",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d5603ed4-b3b6-4d6e-ad9c-f0fcb1d60118",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 350
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "dcf4018d-7205-48e3-abb5-76dee60d409c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "67a8b887-fa39-4743-98d6-a1b536ae8539",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "043702a8-775e-43d6-a932-1e0b90bdb86b",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 356
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "c6f9dd5b-d8c6-4e32-8670-68b854148772",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "44bdce65-5f6c-4d89-8494-103a4622cfdb",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a1635e0a-4627-418e-b2f3-42cd86114792",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 373
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "0d776e4d-8029-4be8-b84d-802a9d4e5800",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "3cdecb11-c829-4ca0-906c-5975f0e07c23",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a1635e0a-4627-418e-b2f3-42cd86114792",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 374
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6163899b-e6a5-4177-9139-20532346fbbd",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "86a8c3cb-c8de-443a-bcda-1ffcb282bc4c",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a1635e0a-4627-418e-b2f3-42cd86114792",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 375
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "66e36b4a-1aa7-48f7-b967-93467cd1682c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0893c568-b3a3-4100-badc-942432abd558",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a1635e0a-4627-418e-b2f3-42cd86114792",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 376
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Filter_SRC_or_DST_Addresses(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Filter_SRC_or_DST_Addresses() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.sourceAddress\", \"!=\", \"\"],\n        ],\n        name=\"Filter_SRC_or_DST_Addresses:condition_1\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        Build_Src_List(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    # collect filtered artifact ids for 'if' condition 2\n    matched_artifacts_2, matched_results_2 = phantom.condition(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.destinationAddress\", \"!=\", \"\"],\n        ],\n        name=\"Filter_SRC_or_DST_Addresses:condition_2\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_2 or matched_results_2:\n        Build_Dst_List(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_2, filtered_results=matched_results_2)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Filter SRC or DST Addresses",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0a9a415a-eba8-4b5e-a212-ae4b3ccd336a",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 44,
                        "line_start": 15,
                        "name": "filter",
                        "notes": "Filter for artifacts that have a sourceAddress or a destinationAddress\n\nBlue - sourceAddresses\n\nPurple - destinationAddresses",
                        "number": 1,
                        "order": 2,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceAddress",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationAddress",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 460,
                            "y": 240
                        },
                        "previous_function": "",
                        "previous_name": "Filter_SRC_or_DST_Addresses",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 425
                    },
                    {
                        ".scmName/text": "local",
                        "active": false,
                        "active_keys": {},
                        "active_values": {},
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".customFunction": {
                                "text": "Build Src List"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".scmName": {
                                "text": "local"
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            ".title-info": {
                                "text": ""
                            },
                            "g.branch image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def Build_Src_List(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Build_Src_List() called')\n    \n    filtered_artifacts_data_0 = phantom.collect2(container=container, datapath=['filtered-data:Filter_SRC_or_DST_Addresses:condition_1:artifact:*.cef.sourceAddress'])\n\n    parameters = []\n\n    for item0 in filtered_artifacts_data_0:\n        parameters.append({\n            'input_string': item0[0],\n        })\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################    \n\n    # call custom function \"local/split_string_list\", returns the custom_function_run_id\n    phantom.custom_function(custom_function='local/split_string_list', parameters=parameters, name='Build_Src_List', callback=IP_Type_Src_Check)\n\n    return",
                        "callback_code": "",
                        "callback_start": 71,
                        "callsback": true,
                        "cfDisplayPath": "local/split_string_list",
                        "cfInputs": {
                            "input_string": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:Filter_SRC_or_DST_Addresses:condition_1:artifact:*.cef.sourceAddress",
                                "paramName": "item0[0]",
                                "type": "item"
                            }
                        },
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "currentVersion": true,
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 14,
                        "customFunction": "local/split_string_list",
                        "customFunctionId": null,
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Build Src List",
                        "delay": 0,
                        "description": "",
                        "draftMode": false,
                        "existingCF": true,
                        "functionBlock": "custom function",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "5aa6ff95-036b-44ea-84e9-ff56fc2c0cf2",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 70,
                        "line_start": 44,
                        "message": "Configuring now",
                        "name": "split_string_list",
                        "notes": "",
                        "number": 1,
                        "order": 3,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": 240
                        },
                        "previous_function": "",
                        "previous_name": "Build_Src_List",
                        "selectedCustomFunction": {
                            "description": "splits a string with comma separated entries into a list of elements",
                            "draftMode": false,
                            "id": 54,
                            "inputs": [
                                {
                                    "_pretty_custom_function": "split_string_list",
                                    "contains_type": [
                                        ""
                                    ],
                                    "custom_function": 54,
                                    "description": "",
                                    "id": 160,
                                    "input_type": "item",
                                    "name": "input_string",
                                    "placeholder": ""
                                }
                            ],
                            "name": "split_string_list",
                            "outputs": [
                                {
                                    "_pretty_custom_function": "split_string_list",
                                    "contains_type": [],
                                    "custom_function": 54,
                                    "data_path": "*.element",
                                    "description": "",
                                    "id": 137
                                }
                            ],
                            "playbooks": {
                                "draft_playbooks": [],
                                "draft_version_id": null,
                                "playbooks": [
                                    {
                                        "active": true,
                                        "display_path": "local/Phantom Homework 5 (Almost Right)",
                                        "draft_mode": false,
                                        "id": 172,
                                        "is_modern": false,
                                        "name": "Phantom Homework 5 (Almost Right)",
                                        "playbook_type": "automation",
                                        "viewable": true
                                    },
                                    {
                                        "active": true,
                                        "display_path": "local/hw6 create normalized artifacts",
                                        "draft_mode": false,
                                        "id": 191,
                                        "is_modern": false,
                                        "name": "hw6 create normalized artifacts",
                                        "playbook_type": "automation",
                                        "viewable": true
                                    }
                                ]
                            },
                            "scmId": 2,
                            "scmName": "local"
                        },
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "repo",
                        "status": "",
                        "title": "custom function",
                        "type": "coa.CustomFunctionBlock",
                        "userGeneratedCode": "    # Write your custom code here...",
                        "warn": false,
                        "z": 583
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "IP Type Dst Check"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def IP_Type_Dst_Check(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('IP_Type_Dst_Check() called')\n    \n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['Build_Dst_List:custom_function_result.data.*.element'], action_results=results)\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    IP_Type_Dst_Check__private_ips = None\n    IP_Type_Dst_Check__public_ips = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    from ipaddress import ip_address\n    \n    private_ips = []\n    public_ips = []\n    \n    for ip in custom_function_results_item_1_0:\n        if ip:\n            if (ip_address(ip).is_private):\n                private_ips.append(ip)\n            else:\n                public_ips.append(ip)\n                \n    phantom.debug(\"private ips: {}\".format(private_ips))\n    phantom.debug(\"public ips: {}\".format(public_ips))\n\n    IP_Type_Dst_Check__private_ips = private_ips\n    IP_Type_Dst_Check__public_ips = public_ips\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='IP_Type_Dst_Check:private_ips', value=json.dumps(IP_Type_Dst_Check__private_ips))\n    phantom.save_run_data(key='IP_Type_Dst_Check:public_ips', value=json.dumps(IP_Type_Dst_Check__public_ips))\n    create_private_dst_artifacts(container=container)\n    create_public_dst_artifacts(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Build Dst List",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 9,
                        "customCodeStartLine": 12,
                        "custom_callback": "",
                        "custom_code": "def IP_Type_Dst_Check(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('IP_Type_Dst_Check() called')\n    \n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['Build_Dst_List:custom_function_result.data.*.element'], action_results=results)\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    IP_Type_Dst_Check__private_ips = None\n    IP_Type_Dst_Check__public_ips = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    from ipaddress import ip_address\n    \n    private_ips = []\n    public_ips = []\n    \n    for ip in custom_function_results_item_1_0:\n        if ip:\n            if (ip_address(ip).is_private):\n                private_ips.append(ip)\n            else:\n                public_ips.append(ip)\n                \n    phantom.debug(\"private ips: {}\".format(private_ips))\n    phantom.debug(\"public ips: {}\".format(public_ips))\n\n    IP_Type_Dst_Check__private_ips = private_ips\n    IP_Type_Dst_Check__public_ips = public_ips\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='IP_Type_Dst_Check:private_ips', value=json.dumps(IP_Type_Dst_Check__private_ips))\n    phantom.save_run_data(key='IP_Type_Dst_Check:public_ips', value=json.dumps(IP_Type_Dst_Check__public_ips))\n    create_private_dst_artifacts(container=container)\n    create_public_dst_artifacts(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "IP Type Dst Check",
                        "description": "Sets ip_type to \"public\" or \"private\" based on input",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "11368d81-4195-4adb-aca4-09d1a65ffd11",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 186,
                        "line_start": 144,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "",
                        "number": 4,
                        "order": 6,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "private_ips"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "public_ips"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "Build_Dst_List:custom_function_result.data.*.element"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 840,
                            "y": 580
                        },
                        "previous_function": "",
                        "previous_name": "IP_Type_Dst_Check",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    from ipaddress import ip_address\n    \n    private_ips = []\n    public_ips = []\n    \n    for ip in custom_function_results_item_1_0:\n        if ip:\n            if (ip_address(ip).is_private):\n                private_ips.append(ip)\n            else:\n                public_ips.append(ip)\n                \n    phantom.debug(\"private ips: {}\".format(private_ips))\n    phantom.debug(\"public ips: {}\".format(public_ips))\n\n    IP_Type_Dst_Check__private_ips = private_ips\n    IP_Type_Dst_Check__public_ips = public_ips\n\n",
                        "warn": false,
                        "z": 596
                    },
                    {
                        ".scmName/text": "local",
                        "active": false,
                        "active_keys": {},
                        "active_values": {},
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".customFunction": {
                                "text": "Build Dst List"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".scmName": {
                                "text": "local"
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            ".title-info": {
                                "text": ""
                            },
                            "g.branch image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def Build_Dst_List(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Build_Dst_List() called')\n    \n    filtered_artifacts_data_0 = phantom.collect2(container=container, datapath=['filtered-data:Filter_SRC_or_DST_Addresses:condition_2:artifact:*.cef.destinationAddress'])\n\n    parameters = []\n\n    for item0 in filtered_artifacts_data_0:\n        parameters.append({\n            'input_string': item0[0],\n        })\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################    \n\n    # call custom function \"local/split_string_list\", returns the custom_function_run_id\n    phantom.custom_function(custom_function='local/split_string_list', parameters=parameters, name='Build_Dst_List', callback=IP_Type_Dst_Check)\n\n    return",
                        "callback_code": "",
                        "callback_start": 98,
                        "callsback": true,
                        "cfDisplayPath": "local/split_string_list",
                        "cfInputs": {
                            "input_string": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:Filter_SRC_or_DST_Addresses:condition_2:artifact:*.cef.destinationAddress",
                                "paramName": "item0[0]",
                                "type": "item"
                            }
                        },
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "currentVersion": true,
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 14,
                        "customFunction": "local/split_string_list",
                        "customFunctionId": null,
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Build Dst List",
                        "delay": 0,
                        "description": "",
                        "draftMode": false,
                        "existingCF": true,
                        "functionBlock": "custom function",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "530a6aaa-bfa8-4305-9424-7c2ade17b251",
                        "inPorts": [
                            "in"
                        ],
                        "input_string-0": "filtered-data:Filter_SRC_or_DST_Addresses:condition_2:artifact:*.cef.destinationAddress",
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 96,
                        "line_start": 70,
                        "message": "Configuring now",
                        "name": "split_string_list",
                        "notes": "",
                        "number": 2,
                        "order": 4,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": 580
                        },
                        "previous_function": "",
                        "previous_name": "Build_Dst_List",
                        "selectedCustomFunction": {
                            "description": "splits a string with comma separated entries into a list of elements",
                            "draftMode": false,
                            "id": 54,
                            "inputs": [
                                {
                                    "_pretty_custom_function": "split_string_list",
                                    "contains_type": [
                                        ""
                                    ],
                                    "custom_function": 54,
                                    "description": "",
                                    "id": 160,
                                    "input_type": "item",
                                    "name": "input_string",
                                    "placeholder": ""
                                }
                            ],
                            "name": "split_string_list",
                            "outputs": [
                                {
                                    "_pretty_custom_function": "split_string_list",
                                    "contains_type": [],
                                    "custom_function": 54,
                                    "data_path": "*.element",
                                    "description": "",
                                    "id": 137
                                }
                            ],
                            "playbooks": {
                                "draft_playbooks": [],
                                "draft_version_id": null,
                                "playbooks": [
                                    {
                                        "active": true,
                                        "display_path": "local/Phantom Homework 5 (Almost Right)",
                                        "draft_mode": false,
                                        "id": 172,
                                        "is_modern": false,
                                        "name": "Phantom Homework 5 (Almost Right)",
                                        "playbook_type": "automation",
                                        "viewable": true
                                    },
                                    {
                                        "active": true,
                                        "display_path": "local/hw6 create normalized artifacts",
                                        "draft_mode": false,
                                        "id": 191,
                                        "is_modern": false,
                                        "name": "hw6 create normalized artifacts",
                                        "playbook_type": "automation",
                                        "viewable": true
                                    }
                                ]
                            },
                            "scmId": 2,
                            "scmName": "local"
                        },
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "repo",
                        "status": "",
                        "title": "custom function",
                        "type": "coa.CustomFunctionBlock",
                        "userGeneratedCode": "    # Write your custom code here...",
                        "warn": false,
                        "z": 597
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "IP Type Src Check"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def IP_Type_Src_Check(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('IP_Type_Src_Check() called')\n    \n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['Build_Src_List:custom_function_result.data.*.element'], action_results=results)\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    IP_Type_Src_Check__private_ips = None\n    IP_Type_Src_Check__public_ips = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    from ipaddress import ip_address\n    \n    private_ips = []\n    public_ips = []\n    \n    for ip in custom_function_results_item_1_0:\n        if ip:\n            if (ip_address(ip).is_private):\n                private_ips.append(ip)\n            else:\n                public_ips.append(ip)\n\n    phantom.debug(\"private ips: {}\".format(private_ips))\n    phantom.debug(\"public ips: {}\".format(public_ips))\n\n    IP_Type_Src_Check__private_ips = private_ips\n    IP_Type_Src_Check__public_ips = public_ips    \n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='IP_Type_Src_Check:private_ips', value=json.dumps(IP_Type_Src_Check__private_ips))\n    phantom.save_run_data(key='IP_Type_Src_Check:public_ips', value=json.dumps(IP_Type_Src_Check__public_ips))\n    create_private_src_artifacts(container=container)\n    create_public_src_artifacts(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Build Src List",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 9,
                        "customCodeStartLine": 12,
                        "custom_callback": "",
                        "custom_code": "def IP_Type_Src_Check(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('IP_Type_Src_Check() called')\n    \n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['Build_Src_List:custom_function_result.data.*.element'], action_results=results)\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    IP_Type_Src_Check__private_ips = None\n    IP_Type_Src_Check__public_ips = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    from ipaddress import ip_address\n    \n    private_ips = []\n    public_ips = []\n    \n    for ip in custom_function_results_item_1_0:\n        if ip:\n            if (ip_address(ip).is_private):\n                private_ips.append(ip)\n            else:\n                public_ips.append(ip)\n\n    phantom.debug(\"private ips: {}\".format(private_ips))\n    phantom.debug(\"public ips: {}\".format(public_ips))\n\n    IP_Type_Src_Check__private_ips = private_ips\n    IP_Type_Src_Check__public_ips = public_ips    \n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='IP_Type_Src_Check:private_ips', value=json.dumps(IP_Type_Src_Check__private_ips))\n    phantom.save_run_data(key='IP_Type_Src_Check:public_ips', value=json.dumps(IP_Type_Src_Check__public_ips))\n    create_private_src_artifacts(container=container)\n    create_public_src_artifacts(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "IP Type Src Check",
                        "description": "Sets ip_type to \"public\" or \"private\" based on input",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "31fc58e4-22db-4523-9c05-d6770804b69e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 141,
                        "line_start": 99,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "",
                        "number": 3,
                        "order": 5,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "private_ips"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "public_ips"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "Build_Src_List:custom_function_result.data.*.element"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 840,
                            "y": 240
                        },
                        "previous_function": "",
                        "previous_name": "IP_Type_Src_Check",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    from ipaddress import ip_address\n    \n    private_ips = []\n    public_ips = []\n    \n    for ip in custom_function_results_item_1_0:\n        if ip:\n            if (ip_address(ip).is_private):\n                private_ips.append(ip)\n            else:\n                public_ips.append(ip)\n\n    phantom.debug(\"private ips: {}\".format(private_ips))\n    phantom.debug(\"public ips: {}\".format(public_ips))\n\n    IP_Type_Src_Check__private_ips = private_ips\n    IP_Type_Src_Check__public_ips = public_ips    \n\n",
                        "warn": false,
                        "z": 598
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "d55f3869-f57e-4983-8575-2c6c14fb06e3",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "043702a8-775e-43d6-a932-1e0b90bdb86b",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0893c568-b3a3-4100-badc-942432abd558",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 660
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f239c201-ec42-4e76-8e25-cbf761858a2f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0cccebc4-4ec8-4364-861a-d7f647184913",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "44bdce65-5f6c-4d89-8494-103a4622cfdb",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 663
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "16e5c35b-32f4-46f4-8359-d8d1a9fd8b91",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "917f8189-b5bc-496f-894c-38b8acd67c9f",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "3cdecb11-c829-4ca0-906c-5975f0e07c23",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 664
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "4358d9cd-98e6-4b91-bc19-ba339e17eae9",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d5603ed4-b3b6-4d6e-ad9c-f0fcb1d60118",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "86a8c3cb-c8de-443a-bcda-1ffcb282bc4c",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 665
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 2
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def private_src_filter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('private_src_filter() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.deviceAddress\", \"!=\", \"\"],\n            [\"artifact:*.cef.cs1\", \"==\", \"private\"],\n            [\"artifact:*.cef.sourceAddress\", \"!=\", \"\"],\n        ],\n        logical_operator='and',\n        name=\"private_src_filter:condition_1\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        delay_execution_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Build Src List",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "private src filter",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0cccebc4-4ec8-4364-861a-d7f647184913",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 300,
                        "line_start": 278,
                        "name": "filter",
                        "notes": "",
                        "number": 2,
                        "order": 11,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.deviceAddress",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "artifact:*.cef.cs1",
                                        "value": "private"
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceAddress",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1340,
                            "y": 240
                        },
                        "previous_function": "",
                        "previous_name": "private_src_filter",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": "",
                        "z": 676
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 5
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def public_dst_filter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('public_dst_filter() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.deviceAddress\", \"!=\", \"\"],\n            [\"artifact:*.cef.cs1\", \"==\", \"public\"],\n            [\"artifact:*.cef.destinationAddress\", \"!=\", \"\"],\n        ],\n        logical_operator='and',\n        name=\"public_dst_filter:condition_1\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        delay_execution_4(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Build Dst List",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "public dst filter",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "043702a8-775e-43d6-a932-1e0b90bdb86b",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 420,
                        "line_start": 398,
                        "name": "filter",
                        "notes": "",
                        "number": 5,
                        "order": 16,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.deviceAddress",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "artifact:*.cef.cs1",
                                        "value": "public"
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationAddress",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1340,
                            "y": 740
                        },
                        "previous_function": "",
                        "previous_name": "public_dst_filter",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": "",
                        "z": 679
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "create private src artifact..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_private_src_artifacts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_private_src_artifacts() called')\n    \n    IP_Type_Src_Check__private_ips = json.loads(phantom.get_run_data(key='IP_Type_Src_Check:private_ips'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    phantom.debug(\"creating src private artifact for {}\".format(IP_Type_Src_Check__private_ips))\n    \n    for ip in IP_Type_Src_Check__private_ips:\n        if ip:\n            cef = {'deviceAddress': ip, 'sourceAddress': ip, 'cs1': 'private', 'cs2': 'src'}\n            phantom.add_artifact(container=container, raw_data=None, cef_data=cef, label='hw6', name='ip artifact', severity='low', run_automation=False)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    private_src_filter(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Build Src List",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def create_private_src_artifacts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_private_src_artifacts() called')\n    \n    IP_Type_Src_Check__private_ips = json.loads(phantom.get_run_data(key='IP_Type_Src_Check:private_ips'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    phantom.debug(\"creating src private artifact for {}\".format(IP_Type_Src_Check__private_ips))\n    \n    for ip in IP_Type_Src_Check__private_ips:\n        if ip:\n            cef = {'deviceAddress': ip, 'sourceAddress': ip, 'cs1': 'private', 'cs2': 'src'}\n            phantom.add_artifact(container=container, raw_data=None, cef_data=cef, label='hw6', name='ip artifact', severity='low', run_automation=False)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    private_src_filter(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "create private src artifacts",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "41d66f19-3374-4267-8240-3fe8a9f7eefe",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 209,
                        "line_start": 186,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "",
                        "number": 5,
                        "order": 7,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "IP_Type_Src_Check:custom_function:private_ips"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1100,
                            "y": 240
                        },
                        "previous_function": "",
                        "previous_name": "create_private_src_artifacts",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    phantom.debug(\"creating src private artifact for {}\".format(IP_Type_Src_Check__private_ips))\n    \n    for ip in IP_Type_Src_Check__private_ips:\n        if ip:\n            cef = {'deviceAddress': ip, 'sourceAddress': ip, 'cs1': 'private', 'cs2': 'src'}\n            phantom.add_artifact(container=container, raw_data=None, cef_data=cef, label='hw6', name='ip artifact', severity='low', run_automation=False)\n\n",
                        "warn": false,
                        "z": 680
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "create public src artifacts"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_public_src_artifacts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_public_src_artifacts() called')\n    \n    IP_Type_Src_Check__public_ips = json.loads(phantom.get_run_data(key='IP_Type_Src_Check:public_ips'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    phantom.debug(\"creating src public artifact for {}\".format(IP_Type_Src_Check__public_ips))\n\n    for ip in IP_Type_Src_Check__public_ips:\n        if ip:\n            cef = {'deviceAddress': ip, 'sourceAddress': ip, 'cs1': 'public', 'cs2': 'src'}\n            phantom.add_artifact(container=container, raw_data=None, cef_data=cef, label='hw6', name='ip artifact', severity='low', run_automation=False)\n\n    ########\n    ########\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    public_src_filter(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Build Src List",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def create_public_src_artifacts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_public_src_artifacts() called')\n    \n    IP_Type_Src_Check__public_ips = json.loads(phantom.get_run_data(key='IP_Type_Src_Check:public_ips'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    phantom.debug(\"creating src public artifact for {}\".format(IP_Type_Src_Check__public_ips))\n\n    for ip in IP_Type_Src_Check__public_ips:\n        if ip:\n            cef = {'deviceAddress': ip, 'sourceAddress': ip, 'cs1': 'public', 'cs2': 'src'}\n            phantom.add_artifact(container=container, raw_data=None, cef_data=cef, label='hw6', name='ip artifact', severity='low', run_automation=False)\n\n    ########\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    public_src_filter(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "create public src artifacts",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "9e8d36fe-2b63-478f-b42a-b7f73cc0028f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 234,
                        "line_start": 209,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "",
                        "number": 6,
                        "order": 8,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "IP_Type_Src_Check:custom_function:public_ips"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1100,
                            "y": 400
                        },
                        "previous_function": "",
                        "previous_name": "create_public_src_artifacts",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    phantom.debug(\"creating src public artifact for {}\".format(IP_Type_Src_Check__public_ips))\n\n    for ip in IP_Type_Src_Check__public_ips:\n        if ip:\n            cef = {'deviceAddress': ip, 'sourceAddress': ip, 'cs1': 'public', 'cs2': 'src'}\n            phantom.add_artifact(container=container, raw_data=None, cef_data=cef, label='hw6', name='ip artifact', severity='low', run_automation=False)\n\n    ########\n    ########",
                        "warn": false,
                        "z": 681
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "create private dst artifact..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_private_dst_artifacts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_private_dst_artifacts() called')\n    \n    IP_Type_Dst_Check__private_ips = json.loads(phantom.get_run_data(key='IP_Type_Dst_Check:private_ips'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    for ip in IP_Type_Dst_Check__private_ips:\n        if ip:\n            cef = {'deviceAddress': ip, 'destinationAddress': ip, 'cs1': 'private', 'cs2': 'dst'}\n            phantom.add_artifact(container=container, raw_data=None, cef_data=cef, label='hw6', name='ip artifact', severity='low', run_automation=False)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    private_dst_filter(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Build Dst List",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def create_private_dst_artifacts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_private_dst_artifacts() called')\n    \n    IP_Type_Dst_Check__private_ips = json.loads(phantom.get_run_data(key='IP_Type_Dst_Check:private_ips'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    for ip in IP_Type_Dst_Check__private_ips:\n        if ip:\n            cef = {'deviceAddress': ip, 'destinationAddress': ip, 'cs1': 'private', 'cs2': 'dst'}\n            phantom.add_artifact(container=container, raw_data=None, cef_data=cef, label='hw6', name='ip artifact', severity='low', run_automation=False)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    private_dst_filter(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "create private dst artifacts",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "6109f49c-1144-4cef-86d9-ce84bc9dc3c4",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 255,
                        "line_start": 234,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "",
                        "number": 7,
                        "order": 9,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "IP_Type_Dst_Check:custom_function:private_ips"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1100,
                            "y": 580
                        },
                        "previous_function": "",
                        "previous_name": "create_private_dst_artifacts",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    for ip in IP_Type_Dst_Check__private_ips:\n        if ip:\n            cef = {'deviceAddress': ip, 'destinationAddress': ip, 'cs1': 'private', 'cs2': 'dst'}\n            phantom.add_artifact(container=container, raw_data=None, cef_data=cef, label='hw6', name='ip artifact', severity='low', run_automation=False)\n\n",
                        "warn": false,
                        "z": 683
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "create public dst artifacts"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_public_dst_artifacts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_public_dst_artifacts() called')\n    \n    IP_Type_Dst_Check__public_ips = json.loads(phantom.get_run_data(key='IP_Type_Dst_Check:public_ips'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    phantom.debug(\"creating dst public artifact for {}\".format(IP_Type_Dst_Check__public_ips))\n\n    for ip in IP_Type_Dst_Check__public_ips:\n        if ip:\n            cef = {'deviceAddress': ip, 'destinationAddress': ip, 'cs1': 'public', 'cs2': 'dst'}\n            phantom.add_artifact(container=container, raw_data=None, cef_data=cef, label='hw6', name='ip artifact', severity='low', run_automation=False)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    public_dst_filter(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Build Dst List",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def create_public_dst_artifacts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_public_dst_artifacts() called')\n    \n    IP_Type_Dst_Check__public_ips = json.loads(phantom.get_run_data(key='IP_Type_Dst_Check:public_ips'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    phantom.debug(\"creating dst public artifact for {}\".format(IP_Type_Dst_Check__public_ips))\n\n    for ip in IP_Type_Dst_Check__public_ips:\n        if ip:\n            cef = {'deviceAddress': ip, 'destinationAddress': ip, 'cs1': 'public', 'cs2': 'dst'}\n            phantom.add_artifact(container=container, raw_data=None, cef_data=cef, label='hw6', name='ip artifact', severity='low', run_automation=False)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    public_dst_filter(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "create public dst artifacts",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "67a8b887-fa39-4743-98d6-a1b536ae8539",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 278,
                        "line_start": 255,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "",
                        "number": 8,
                        "order": 10,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "IP_Type_Dst_Check:custom_function:public_ips"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1100,
                            "y": 740
                        },
                        "previous_function": "",
                        "previous_name": "create_public_dst_artifacts",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    phantom.debug(\"creating dst public artifact for {}\".format(IP_Type_Dst_Check__public_ips))\n\n    for ip in IP_Type_Dst_Check__public_ips:\n        if ip:\n            cef = {'deviceAddress': ip, 'destinationAddress': ip, 'cs1': 'public', 'cs2': 'dst'}\n            phantom.add_artifact(container=container, raw_data=None, cef_data=cef, label='hw6', name='ip artifact', severity='low', run_automation=False)\n\n",
                        "warn": false,
                        "z": 684
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 3
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def public_src_filter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('public_src_filter() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.deviceAddress\", \"!=\", \"\"],\n            [\"artifact:*.cef.cs1\", \"==\", \"public\"],\n            [\"artifact:*.cef.sourceAddress\", \"!=\", \"\"],\n        ],\n        logical_operator='and',\n        name=\"public_src_filter:condition_1\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        delay_execution_2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Build Src List",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "public src filter",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "917f8189-b5bc-496f-894c-38b8acd67c9f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 349,
                        "line_start": 327,
                        "name": "filter",
                        "notes": "",
                        "number": 3,
                        "order": 13,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.deviceAddress",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "artifact:*.cef.cs1",
                                        "value": "public"
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceAddress",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1340,
                            "y": 400
                        },
                        "previous_function": "",
                        "previous_name": "public_src_filter",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": "",
                        "z": 685
                    },
                    {
                        "action": "delay execution",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "action": "local/hw6 print address message",
                            "action_scope": "artifact",
                            "artifact_id": "filtered-data:private_src_filter:condition_1:artifact:*.id",
                            "delay_duration": "1",
                            "delay_purpose": "create artifact for each private src ip",
                            "duration_unit": "Minutes"
                        },
                        "angle": 0,
                        "app": "Waiter",
                        "appid": "143152b1-f55a-401b-8b6f-cf454724a1a8",
                        "approver": "",
                        "assets": [
                            {
                                "action": "delay execution",
                                "actions": [
                                    "on poll",
                                    "prevent execution",
                                    "randomize execution",
                                    "delay execution",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Waiter",
                                "app_version": "1.2.0",
                                "appid": "143152b1-f55a-401b-8b6f-cf454724a1a8",
                                "asset_name": "waiter",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "action": "local/hw6 print address message",
                                    "action_scope": "artifact",
                                    "artifact_id": "filtered-data:private_src_filter:condition_1:artifact:*.id",
                                    "delay_duration": "1",
                                    "delay_purpose": "create artifact for each private src ip",
                                    "duration_unit": "Minutes"
                                },
                                "has_app": true,
                                "id": 10,
                                "loaded": false,
                                "missing": false,
                                "name": "waiter",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.delay_purpose",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.duration_unit",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.delay_duration",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.parameter.action",
                                        "data_type": "string"
                                    }
                                ],
                                "parameters": {
                                    "action": {
                                        "data_type": "string",
                                        "default": null,
                                        "defaut": "<repository>/<playbook name>",
                                        "description": "The playbook do you want to execute after the delay",
                                        "key": "action",
                                        "order": 3,
                                        "required": true
                                    },
                                    "action_scope": {
                                        "data_type": "string",
                                        "default": "all",
                                        "description": "The scope you want the action to run with",
                                        "key": "action_scope",
                                        "order": 4,
                                        "required": true,
                                        "value_list": [
                                            "new",
                                            "all",
                                            "artifact"
                                        ]
                                    },
                                    "artifact_id": {
                                        "data_type": "numeric",
                                        "default": null,
                                        "description": "The ID of the artifact to run on (requires artifact scope)",
                                        "key": "artifact_id",
                                        "order": 5,
                                        "required": false
                                    },
                                    "delay_duration": {
                                        "data_type": "numeric",
                                        "default": 5,
                                        "description": "How many units do you want to delay",
                                        "key": "delay_duration",
                                        "order": 2,
                                        "required": true
                                    },
                                    "delay_purpose": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "A short comment on the purpose of the delayed execution",
                                        "key": "delay_purpose",
                                        "order": 0,
                                        "required": true
                                    },
                                    "duration_unit": {
                                        "data_type": "string",
                                        "default": "Minutes",
                                        "description": "Units to be used for delay duration",
                                        "key": "duration_unit",
                                        "order": 1,
                                        "required": true,
                                        "value_list": [
                                            "Minutes",
                                            "Hours",
                                            "Days"
                                        ]
                                    }
                                },
                                "product_name": "Waiter",
                                "product_vendor": "Mhike",
                                "targets": "10",
                                "type": "generic"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "delay execution 1"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def delay_execution_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('delay_execution_1() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'delay_execution_1' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:private_src_filter:condition_1:artifact:*.id', 'filtered-data:private_src_filter:condition_1:artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'delay_execution_1' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        parameters.append({\n            'action': \"local/hw6 print address message\",\n            'artifact_id': filtered_artifacts_item_1[0],\n            'action_scope': \"artifact\",\n            'delay_purpose': \"create artifact for each private src ip\",\n            'duration_unit': \"Minutes\",\n            'delay_duration': 1,\n            # context (artifact id) is added to associate results with the artifact\n            'context': {'artifact_id': filtered_artifacts_item_1[1]},\n        })\n\n    phantom.act(action=\"delay execution\", parameters=parameters, assets=['waiter'], name=\"delay_execution_1\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Build Src List",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "delay": "0",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "44bdce65-5f6c-4d89-8494-103a4622cfdb",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 327,
                        "line_start": 300,
                        "message": "Configuring now",
                        "name": "delay execution",
                        "notes": "",
                        "number": 1,
                        "order": 12,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1480,
                            "y": 240
                        },
                        "previous_function": "",
                        "previous_name": "delay_execution_1",
                        "required_params": {
                            "action": true,
                            "action_scope": true,
                            "delay_duration": true,
                            "delay_purpose": true,
                            "duration_unit": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": "",
                        "z": 686
                    },
                    {
                        "action": "delay execution",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "action": "local/hw6 print address message",
                            "action_scope": "artifact",
                            "artifact_id": "filtered-data:public_src_filter:condition_1:artifact:*.id",
                            "delay_duration": "1",
                            "delay_purpose": "create artifact for each public src ip",
                            "duration_unit": "Minutes"
                        },
                        "angle": 0,
                        "app": "Waiter",
                        "appid": "143152b1-f55a-401b-8b6f-cf454724a1a8",
                        "approver": "",
                        "assets": [
                            {
                                "action": "delay execution",
                                "actions": [
                                    "on poll",
                                    "prevent execution",
                                    "randomize execution",
                                    "delay execution",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Waiter",
                                "app_version": "1.2.0",
                                "appid": "143152b1-f55a-401b-8b6f-cf454724a1a8",
                                "asset_name": "waiter",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "action": "local/hw6 print address message",
                                    "action_scope": "artifact",
                                    "artifact_id": "filtered-data:public_src_filter:condition_1:artifact:*.id",
                                    "delay_duration": "1",
                                    "delay_purpose": "create artifact for each public src ip",
                                    "duration_unit": "Minutes"
                                },
                                "has_app": true,
                                "id": 10,
                                "loaded": false,
                                "missing": false,
                                "name": "waiter",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.delay_purpose",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.duration_unit",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.delay_duration",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.parameter.action",
                                        "data_type": "string"
                                    }
                                ],
                                "parameters": {
                                    "action": {
                                        "data_type": "string",
                                        "default": null,
                                        "defaut": "<repository>/<playbook name>",
                                        "description": "The playbook do you want to execute after the delay",
                                        "key": "action",
                                        "order": 3,
                                        "required": true
                                    },
                                    "action_scope": {
                                        "data_type": "string",
                                        "default": "all",
                                        "description": "The scope you want the action to run with",
                                        "key": "action_scope",
                                        "order": 4,
                                        "required": true,
                                        "value_list": [
                                            "new",
                                            "all",
                                            "artifact"
                                        ]
                                    },
                                    "artifact_id": {
                                        "data_type": "numeric",
                                        "default": null,
                                        "description": "The ID of the artifact to run on (requires artifact scope)",
                                        "key": "artifact_id",
                                        "order": 5,
                                        "required": false
                                    },
                                    "delay_duration": {
                                        "data_type": "numeric",
                                        "default": 5,
                                        "description": "How many units do you want to delay",
                                        "key": "delay_duration",
                                        "order": 2,
                                        "required": true
                                    },
                                    "delay_purpose": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "A short comment on the purpose of the delayed execution",
                                        "key": "delay_purpose",
                                        "order": 0,
                                        "required": true
                                    },
                                    "duration_unit": {
                                        "data_type": "string",
                                        "default": "Minutes",
                                        "description": "Units to be used for delay duration",
                                        "key": "duration_unit",
                                        "order": 1,
                                        "required": true,
                                        "value_list": [
                                            "Minutes",
                                            "Hours",
                                            "Days"
                                        ]
                                    }
                                },
                                "product_name": "Waiter",
                                "product_vendor": "Mhike",
                                "targets": "10",
                                "type": "generic"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "delay execution 2"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def delay_execution_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('delay_execution_2() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'delay_execution_2' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:public_src_filter:condition_1:artifact:*.id', 'filtered-data:public_src_filter:condition_1:artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'delay_execution_2' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        parameters.append({\n            'action': \"local/hw6 print address message\",\n            'artifact_id': filtered_artifacts_item_1[0],\n            'action_scope': \"artifact\",\n            'delay_purpose': \"create artifact for each public src ip\",\n            'duration_unit': \"Minutes\",\n            'delay_duration': 1,\n            # context (artifact id) is added to associate results with the artifact\n            'context': {'artifact_id': filtered_artifacts_item_1[1]},\n        })\n\n    phantom.act(action=\"delay execution\", parameters=parameters, assets=['waiter'], name=\"delay_execution_2\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Build Src List",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "3cdecb11-c829-4ca0-906c-5975f0e07c23",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 376,
                        "line_start": 349,
                        "message": "Configuring now",
                        "name": "delay execution",
                        "notes": "",
                        "number": 2,
                        "order": 14,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1480,
                            "y": 400
                        },
                        "previous_function": "",
                        "previous_name": "delay_execution_2",
                        "required_params": {
                            "action": true,
                            "action_scope": true,
                            "delay_duration": true,
                            "delay_purpose": true,
                            "duration_unit": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": "",
                        "z": 687
                    },
                    {
                        "action": "delay execution",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "action": "local/hw6 print address message",
                            "action_scope": "artifact",
                            "artifact_id": "filtered-data:private_dst_filter:condition_1:artifact:*.id",
                            "delay_duration": "1",
                            "delay_purpose": "create artifact for each private dst ip",
                            "duration_unit": "Minutes"
                        },
                        "angle": 0,
                        "app": "Waiter",
                        "appid": "143152b1-f55a-401b-8b6f-cf454724a1a8",
                        "approver": "",
                        "assets": [
                            {
                                "action": "delay execution",
                                "actions": [
                                    "on poll",
                                    "prevent execution",
                                    "randomize execution",
                                    "delay execution",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Waiter",
                                "app_version": "1.2.0",
                                "appid": "143152b1-f55a-401b-8b6f-cf454724a1a8",
                                "asset_name": "waiter",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "action": "local/hw6 print address message",
                                    "action_scope": "artifact",
                                    "artifact_id": "filtered-data:private_dst_filter:condition_1:artifact:*.id",
                                    "delay_duration": "1",
                                    "delay_purpose": "create artifact for each private dst ip",
                                    "duration_unit": "Minutes"
                                },
                                "has_app": true,
                                "id": 10,
                                "loaded": false,
                                "missing": false,
                                "name": "waiter",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.delay_purpose",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.duration_unit",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.delay_duration",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.parameter.action",
                                        "data_type": "string"
                                    }
                                ],
                                "parameters": {
                                    "action": {
                                        "data_type": "string",
                                        "default": null,
                                        "defaut": "<repository>/<playbook name>",
                                        "description": "The playbook do you want to execute after the delay",
                                        "key": "action",
                                        "order": 3,
                                        "required": true
                                    },
                                    "action_scope": {
                                        "data_type": "string",
                                        "default": "all",
                                        "description": "The scope you want the action to run with",
                                        "key": "action_scope",
                                        "order": 4,
                                        "required": true,
                                        "value_list": [
                                            "new",
                                            "all",
                                            "artifact"
                                        ]
                                    },
                                    "artifact_id": {
                                        "data_type": "numeric",
                                        "default": null,
                                        "description": "The ID of the artifact to run on (requires artifact scope)",
                                        "key": "artifact_id",
                                        "order": 5,
                                        "required": false
                                    },
                                    "delay_duration": {
                                        "data_type": "numeric",
                                        "default": 5,
                                        "description": "How many units do you want to delay",
                                        "key": "delay_duration",
                                        "order": 2,
                                        "required": true
                                    },
                                    "delay_purpose": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "A short comment on the purpose of the delayed execution",
                                        "key": "delay_purpose",
                                        "order": 0,
                                        "required": true
                                    },
                                    "duration_unit": {
                                        "data_type": "string",
                                        "default": "Minutes",
                                        "description": "Units to be used for delay duration",
                                        "key": "duration_unit",
                                        "order": 1,
                                        "required": true,
                                        "value_list": [
                                            "Minutes",
                                            "Hours",
                                            "Days"
                                        ]
                                    }
                                },
                                "product_name": "Waiter",
                                "product_vendor": "Mhike",
                                "targets": "10",
                                "type": "generic"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "delay execution 3"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def delay_execution_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('delay_execution_3() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'delay_execution_3' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:private_dst_filter:condition_1:artifact:*.id', 'filtered-data:private_dst_filter:condition_1:artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'delay_execution_3' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        parameters.append({\n            'action': \"local/hw6 print address message\",\n            'artifact_id': filtered_artifacts_item_1[0],\n            'action_scope': \"artifact\",\n            'delay_purpose': \"create artifact for each private dst ip\",\n            'duration_unit': \"Minutes\",\n            'delay_duration': 1,\n            # context (artifact id) is added to associate results with the artifact\n            'context': {'artifact_id': filtered_artifacts_item_1[1]},\n        })\n\n    phantom.act(action=\"delay execution\", parameters=parameters, assets=['waiter'], name=\"delay_execution_3\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Build Dst List",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "86a8c3cb-c8de-443a-bcda-1ffcb282bc4c",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 447,
                        "line_start": 420,
                        "message": "Configuring now",
                        "name": "delay execution",
                        "notes": "",
                        "number": 3,
                        "order": 17,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1480,
                            "y": 580
                        },
                        "previous_function": "",
                        "previous_name": "delay_execution_3",
                        "required_params": {
                            "action": true,
                            "action_scope": true,
                            "delay_duration": true,
                            "delay_purpose": true,
                            "duration_unit": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": "",
                        "z": 688
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 4
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def private_dst_filter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('private_dst_filter() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.deviceAddress\", \"!=\", \"\"],\n            [\"artifact:*.cef.cs1\", \"==\", \"private\"],\n            [\"artifact:*.cef.destinationAddress\", \"!=\", \"\"],\n        ],\n        logical_operator='and',\n        name=\"private_dst_filter:condition_1\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        delay_execution_3(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Build Dst List",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "private dst filter",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d5603ed4-b3b6-4d6e-ad9c-f0fcb1d60118",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 398,
                        "line_start": 376,
                        "name": "filter",
                        "notes": "",
                        "number": 4,
                        "order": 15,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.deviceAddress",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "artifact:*.cef.cs1",
                                        "value": "private"
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationAddress",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1340,
                            "y": 580
                        },
                        "previous_function": "",
                        "previous_name": "private_dst_filter",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": "",
                        "z": 689
                    },
                    {
                        "action": "delay execution",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "action": "local/hw6 print address message",
                            "action_scope": "artifact",
                            "artifact_id": "filtered-data:public_dst_filter:condition_1:artifact:*.id",
                            "delay_duration": "1",
                            "delay_purpose": "process public dst ips",
                            "duration_unit": "Minutes"
                        },
                        "angle": 0,
                        "app": "Waiter",
                        "appid": "143152b1-f55a-401b-8b6f-cf454724a1a8",
                        "approver": "",
                        "assets": [
                            {
                                "action": "delay execution",
                                "actions": [
                                    "on poll",
                                    "prevent execution",
                                    "randomize execution",
                                    "delay execution",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Waiter",
                                "app_version": "1.2.0",
                                "appid": "143152b1-f55a-401b-8b6f-cf454724a1a8",
                                "asset_name": "waiter",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "action": "local/hw6 print address message",
                                    "action_scope": "artifact",
                                    "artifact_id": "filtered-data:public_dst_filter:condition_1:artifact:*.id",
                                    "delay_duration": "1",
                                    "delay_purpose": "process public dst ips",
                                    "duration_unit": "Minutes"
                                },
                                "has_app": true,
                                "id": 10,
                                "loaded": false,
                                "missing": false,
                                "name": "waiter",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.delay_purpose",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.duration_unit",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.delay_duration",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.parameter.action",
                                        "data_type": "string"
                                    }
                                ],
                                "parameters": {
                                    "action": {
                                        "data_type": "string",
                                        "default": null,
                                        "defaut": "<repository>/<playbook name>",
                                        "description": "The playbook do you want to execute after the delay",
                                        "key": "action",
                                        "order": 3,
                                        "required": true
                                    },
                                    "action_scope": {
                                        "data_type": "string",
                                        "default": "all",
                                        "description": "The scope you want the action to run with",
                                        "key": "action_scope",
                                        "order": 4,
                                        "required": true,
                                        "value_list": [
                                            "new",
                                            "all",
                                            "artifact"
                                        ]
                                    },
                                    "artifact_id": {
                                        "data_type": "numeric",
                                        "default": null,
                                        "description": "The ID of the artifact to run on (requires artifact scope)",
                                        "key": "artifact_id",
                                        "order": 5,
                                        "required": false
                                    },
                                    "delay_duration": {
                                        "data_type": "numeric",
                                        "default": 5,
                                        "description": "How many units do you want to delay",
                                        "key": "delay_duration",
                                        "order": 2,
                                        "required": true
                                    },
                                    "delay_purpose": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "A short comment on the purpose of the delayed execution",
                                        "key": "delay_purpose",
                                        "order": 0,
                                        "required": true
                                    },
                                    "duration_unit": {
                                        "data_type": "string",
                                        "default": "Minutes",
                                        "description": "Units to be used for delay duration",
                                        "key": "duration_unit",
                                        "order": 1,
                                        "required": true,
                                        "value_list": [
                                            "Minutes",
                                            "Hours",
                                            "Days"
                                        ]
                                    }
                                },
                                "product_name": "Waiter",
                                "product_vendor": "Mhike",
                                "targets": "10",
                                "type": "generic"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "delay execution 4"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def delay_execution_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('delay_execution_4() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'delay_execution_4' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:public_dst_filter:condition_1:artifact:*.id', 'filtered-data:public_dst_filter:condition_1:artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'delay_execution_4' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        parameters.append({\n            'action': \"local/hw6 print address message\",\n            'artifact_id': filtered_artifacts_item_1[0],\n            'action_scope': \"artifact\",\n            'delay_purpose': \"process public dst ips\",\n            'duration_unit': \"Minutes\",\n            'delay_duration': 1,\n            # context (artifact id) is added to associate results with the artifact\n            'context': {'artifact_id': filtered_artifacts_item_1[1]},\n        })\n\n    phantom.act(action=\"delay execution\", parameters=parameters, assets=['waiter'], name=\"delay_execution_4\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Build Dst List",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0893c568-b3a3-4100-badc-942432abd558",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 474,
                        "line_start": 447,
                        "message": "Configuring now",
                        "name": "delay execution",
                        "notes": "",
                        "number": 4,
                        "order": 18,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1480,
                            "y": 740
                        },
                        "previous_function": "",
                        "previous_name": "delay_execution_4",
                        "required_params": {
                            "action": true,
                            "action_scope": true,
                            "delay_duration": true,
                            "delay_purpose": true,
                            "duration_unit": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": "",
                        "z": 690
                    }
                ]
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "4",
        "version": "5.2.1.78411"
    },
    "create_time": "2022-02-24T12:54:50.248817+00:00",
    "draft_mode": false,
    "labels": [
        "class"
    ],
    "tags": []
}